{"componentChunkName":"component---src-templates-blog-post-js","path":"/how-to-create-fancy-revealing-animations-with-these-simple-css-tricks/","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://miro.medium.com/max/1400/1*ynlLC2peJqckBIOb9qUjSg.gif\" alt=\"TypeScript AST Interactive Viewer\"><em><a href=\"https://ast.carlosroso.com/\" target=\"_blank\" rel=\"nofollow\">Animated page transition</a></em></p>\n<div class=\"divider\"></div>\n<p>I hate clickbait articles as much as you do, this ain’t one of those though. So, let me save you a 10-minute read by just spitting out the tricks right here, right now.</p>\n<blockquote>\n<p>Define a handful of CSS animations with <code class=\"language-text\">@keyframes</code>, set the element’s initial state (opacity:0, scale(0), etc), set the element’s <code class=\"language-text\">animation</code> CSS property to be one of the animations you just defined, set the animation’s fill-mode to forwards , don’t always use the good old <code class=\"language-text\">ease</code> timing function but instead try some cool <code class=\"language-text\">cubic-bezier</code>. Orchestrate the whole thing via animation-delay . Keep it clean and classy by avoiding wide range movements. Only animate <code class=\"language-text\">transform</code> and <code class=\"language-text\">opacity</code>. Always strive for 60fps.</p>\n</blockquote>\n<p>Easy, huh? This is obviously framework agnostic as the element’s <code class=\"language-text\">animation</code> will trigger once it’s inserted into the DOM or it’s <code class=\"language-text\">display</code> property goes from <code class=\"language-text\">none</code> to visible. This is the normal behavior of any framework’s router so you’ll be good to go regardless of your preferred frontend stack.</p>\n<p>Thanks for reading.</p>\n<div class=\"divider\"></div>\n<p>Wait, it seems you want some more detail, some more meat. That’s cool, I can do that as well. So, in the next couple of paragraphs, I’ll explain to you in more detail how to <strong>easily</strong> achieve the animation shown above.</p>\n<h1>Mastering the technique</h1>\n<h2>Reveal dat header</h2>\n<p>I’ll explain how the whole animation technique works by going step by step through the process of revealing the header of our sample site. We’ll start by first identifying the three <em>agents</em> we want to independently animate:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3560/1*U62AXNWYlSsFFa9D8aRSdw.png\" alt=\"\"></p>\n<p>We basically have 3 agents that we want to reveal at different times. I have colored in blue the time offset in which each agent should reveal itself. We want Agent 1 and Agent 3 to subtly fade-in from the left. For Agent 2, it makes sense to have a cool enlarge animation from left to right just as if the line was flowing from Agent 1 to Agent 3. Let’s start by defining our core CSS animations:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber 0\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> fade-in-right</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-15px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> grow-left</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">from</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scaleX</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">to</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scaleX</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>For <code class=\"language-text\">fade-in-right</code> we just define our element’s initial state as <em>hidden</em> and moved a <strong>bit</strong> to the left, and our final state will render our element to full opacity and will locate it back to its natural position. Look how I go with just 15px of movement range. <strong>Always avoid long-range movements; the whole secret lies in small, subtle motion</strong>. The code for <code class=\"language-text\">grow-left</code> is pretty much self-explanatory so I really don’t have to go into details. The cool thing here is to see I’m only animating the following two CSS properties: <code class=\"language-text\">transform</code> and <code class=\"language-text\">opacity</code> . You might want to read more about <a href=\"https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/\" target=\"_blank\" rel=\"nofollow\">why you should avoid animating any other property</a> if you’re truly committed to high performant, 60fps animations.</p>\n<p>Now that we defined our animations, let’s apply them to our agents. Three important things you need to keep in mind before looking at the code:</p>\n<ol>\n<li>\n<p>Set the initial state of the element in its default CSS properties</p>\n</li>\n<li>\n<p>Use forwards as the fill mode of the animation so that it preserves its final state</p>\n</li>\n<li>\n<p>Orchestrate revealings via animation-delay</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber 0\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token selector\">.agent-1, .agent-3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> fade-in-right ease 0.4s forwards<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.agent-2</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scaleX</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> grow-left <span class=\"token function\">cubic-bezier</span><span class=\"token punctuation\">(</span>0.785<span class=\"token punctuation\">,</span> 0.135<span class=\"token punctuation\">,</span> 0.15<span class=\"token punctuation\">,</span> 0.86<span class=\"token punctuation\">)</span> 0.5s forwards<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> 0.4s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.agent-3</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> 0.8s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Look how we defined the initial state for agents 1 and 3 as <code class=\"language-text\">opacity: 0</code> because we want them to be hidden until the fade-in transition comes in. Then, we set the animation to be the previously defined <code class=\"language-text\">fade-in-right</code> with the good old <code class=\"language-text\">ease</code> function and <code class=\"language-text\">forwards</code> fill-mode. As we still want Agent 3 to make its entrance to the scene, later on, we set an <code class=\"language-text\">animation-delay: 0.8s</code> which basically means that the animation won’t start up until 800 ms have passed since the element was placed on the DOM or was made visible via <code class=\"language-text\">display</code> property. Really easy isn’t it?</p>\n<p>Now, for Agent 2 things are a bit different. The initial state is set to <code class=\"language-text\">transform: scaleX(0)</code> otherwise our element will be shown fully enlarged up until the animation kicks in. So, by setting an initial set we’re indicating how the element should render even before the animation is fired. Then we set its <code class=\"language-text\">transform-origin: left</code> property so that the line enlarges from left to right, otherwise, its anchor would be the center by default. We then do something similar as with agents 1 and 3 by setting <code class=\"language-text\">animation: grow-left</code>, its fill mode to <code class=\"language-text\">forwards</code> and making sure it reveals itself only after 0.4 seconds of being rendered in the DOM. The interesting bit here is the fact that we’re not using the default <code class=\"language-text\">ease</code> function as our animation timing function but instead we define a custom <code class=\"language-text\">cubic-bezier</code> function. This allows us to create more interesting and visually appealing transitions than those coming by default in the browser. Go ahead and try defining your own <code class=\"language-text\">cubic-bezier</code> with <a href=\"http://cubic-bezier.com/#.17,.67,.83,.67\" target=\"_blank\" rel=\"nofollow\">this fun tool</a>.</p>\n<p>Let’s see the final result:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/3868/1*gi3-Rva6X4KSXUpbOLC67A.gif\" alt=\"\"></p>\n<p>Pretty cool, huh? Look how the <code class=\"language-text\">animation-delay</code> makes a lot of sense now and how agents 1 and 3 both have the same revealing motion. Coming up with the right animation durations and animation delays is a matter of tuning by trial and error so don’t stress too much about it and just have fun playing with it.</p>\n<h2>Show me the body now</h2>\n<p>It really makes no sense to go through the process of animating the rest of the content as the same technique repeats over and over again:</p>\n<ol>\n<li>\n<p>Identify agents and revealing timings</p>\n</li>\n<li>\n<p>Create appropriate animations</p>\n</li>\n<li>\n<p>Set initial states to agents</p>\n</li>\n<li>\n<p>Set animations to each agent and orchestrate via proper animation delays</p>\n</li>\n<li>\n<p>Tune the animation by trial and error</p>\n</li>\n<li>\n<p>Profit</p>\n</li>\n</ol>\n<h2>Cool, but, you know, #perfmatters</h2>\n<p>Yeah, perf matters, and that’s why we strive to run the whole show with just <code class=\"language-text\">transform</code> and <code class=\"language-text\">opacity</code>. These are the only properties that just trigger compositing in the browser rendering process, thus avoiding computing work and therefore resulting in a jank free experience.</p>\n<p>Let’s run a perf profiling on our revealing animation:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2072/1*NNKtB8-vXjV9OYc84kilNg.png\" alt=\"\"></p>\n<p>You go ahead and look at <strong>dat</strong> green bar. This means that 99% of the time we hit 60fps in the whole animation. 60 frames per goddamn second (sorry, I’m just so proud of that). It can’t really be more performant. Please keep in mind that the more elements you animate (known as agents in this article), the <a href=\"http://jankfree.org/\" target=\"_blank\" rel=\"nofollow\">jankier</a> your app will look like even when using the CSS golden props. This is because every animation will inevitably add a bit of GPU workload. So, try pushing to limit the number of animated elements but always strive to hit the 60fps mark.</p>\n<h2>Too much magic</h2>\n<blockquote>\n<p>“I’m really not that creative to come up with fancy animations like these”</p>\n</blockquote>\n<p>Building great animations is not a matter of being technically competent but instead it takes quite a good sense of design and an innate drive to craft good UI interactions. This can be very difficult and only the most talented designers are creative enough to accomplish such feats. However, we mortals are still able to learn by imitating and taking as much inspiration as we can from true pros. For this I recommend you to frequently visit sites like <a href=\"https://www.awwwards.com/\" target=\"_blank\" rel=\"nofollow\">Awwwards</a> or <a href=\"https://dribbble.com/search?q=page+transition\" target=\"_blank\" rel=\"nofollow\">Dribbble</a> and check ideas on cool page revealing animations.</p>\n<div class=\"divider\"></div>\n<p>I really hope you got rid of any fear you had regarding revealing animations with this article. It’s not rocket science as you saw but, if done well, it can surely add that <em><strong>wow</strong></em> factor your app is missing today. So, go ahead a create some cool animations on your site and shoot a tweet at <a href=\"https://twitter.com/caroso1222\" target=\"_blank\" rel=\"nofollow\">@caroso1222</a> with whatever you come up with!</p>\n<p>Show some love by hitting that heart if you got any inspiration from this article or leave a comment.</p>","frontmatter":{"title":"How to create fancy revealing animations with these simple CSS tricks","description":"A life changing approach to CSS transitions.","meta":null,"date":"August 11, 2017"}}},"pageContext":{"slug":"/how-to-create-fancy-revealing-animations-with-these-simple-css-tricks/","previous":{"fields":{"slug":"/how-i-got-into-the-most-exclusive-remote-working-platforms/"},"frontmatter":{"title":"How I got into the most exclusive remote working platforms"}},"next":{"fields":{"slug":"/deploying-frontend-applications-the-fun-way/"},"frontmatter":{"title":"Deploying frontend applications — the fun way"}}}},"staticQueryHashes":["3649515864","63159454"]}
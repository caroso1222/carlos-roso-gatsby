{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-fast-and-easy-way-to-create-a-typescript-library/","result":{"data":{"markdownRemark":{"html":"<p>The secret to being prolific at something is to automate mundane tasks as much as possible. For software, this can translated as using CLIs, starters or boilerplates to get you up and running in no time. Let’s see how to quickly set up a Typescript library with unit testing, automatic release, continous integration, and documentation.</p>\n<div class=\"divider\"></div>\n<p>For didactic purposes, we’ll create a useless library that exposes a method to count the words in a sentence.</p>\n<ol>\n<li>We’ll use the <a href=\"https://github.com/bitjson/typescript-starter\" target=\"_blank\" rel=\"nofollow\">typescript-starter</a> CLI to get us up and running. Execute this in the terminal:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npx typescript-starter</code></pre></div>\n<p>It’ll make you run through a series of questions. Write the name of your library and choose whether you want this to be a browser or Node library. We’ll choose “Node.js application” for our example. Also, I normally prefer TravisCI over CircleCI.</p>\n<p><img src=\"/50eeec5f816b0ce4b8a262e1973bd6e9/starter.gif\" alt=\"starter\"></p>\n<ol start=\"2\">\n<li>Remove the contents from <code class=\"language-text\">src/lib</code> and create a file for your library.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ rm -rf src/lib/* &amp;&amp; touch src/lib/tswordcount.ts</code></pre></div>\n<ol start=\"3\">\n<li>Edit <code class=\"language-text\">src/index.ts</code> to configure your public API.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lib/tswordcount'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>Write your function in the file created in step 2. Our file is <code class=\"language-text\">src/lib/tswordcount.ts</code>.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">countWords</span><span class=\"token punctuation\">(</span>sentence<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sentence<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Note: Notice we’re not doing <code class=\"language-text\">.split(' ')</code> as this would fail at inputs with long spaces in between the words. We use regex to separate words regardless of the spaces that divide them.</em></p>\n<ol start=\"5\">\n<li>Create a file to write your unit tests. Let’s name it <code class=\"language-text\">tswordcount.spec.ts</code>. It should live in the same folder where our source file is.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ touch src/lib/tswordcount.spec.ts</code></pre></div>\n<ol start=\"6\">\n<li>This starter uses <a href=\"https://github.com/avajs/ava\" target=\"_blank\" rel=\"nofollow\">AVA</a> for unit tests. The syntax is similar to every other testing library out there. Let’s write a simple test for our function.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// tslint:disable:no-expression-statement</span>\n<span class=\"token keyword\">import</span> test <span class=\"token keyword\">from</span> <span class=\"token string\">'ava'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> countWords <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./tswordcount'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should count words'</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> testString <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span>\n  t<span class=\"token punctuation\">.</span><span class=\"token keyword\">is</span><span class=\"token punctuation\">(</span><span class=\"token function\">countWords</span><span class=\"token punctuation\">(</span>testString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should count words with long spaces'</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> testString <span class=\"token operator\">=</span> <span class=\"token string\">'hello     world this is carlos    '</span><span class=\"token punctuation\">;</span>\n  t<span class=\"token punctuation\">.</span><span class=\"token keyword\">is</span><span class=\"token punctuation\">(</span><span class=\"token function\">countWords</span><span class=\"token punctuation\">(</span>testString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"7\">\n<li>Test and build the library in one command.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm run test</code></pre></div>\n<ol start=\"8\">\n<li>If everything goes well you should have a <code class=\"language-text\">/build</code> folder with folders <code class=\"language-text\">/main</code> and <code class=\"language-text\">/module</code>. The former is configured for <a href=\"https://github.com/bitjson/typescript-starter#why-are-there-two-builds-main-and-module\" target=\"_blank\" rel=\"nofollow\">CommonJS and the latter for ES6 module system</a>. Now you’re all set to publish your library.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm publish</code></pre></div>\n<ol start=\"9\">\n<li>Bonus: Documentation</li>\n</ol>\n<div class=\"divider\"></div>\n<h1>Gotchas</h1>\n<p>You might face some problems right from the start because the project hasn’t been maintained for a few months now. Follow the next steps to fix them.</p>\n<ol>\n<li>Install the latest version of AVA</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm i ava@latest</code></pre></div>\n<ol start=\"2\">\n<li>Remove the following lines from <code class=\"language-text\">package.json</code> to make AVA work properly</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">\"ava\": {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   \"failFast\": true,\n<span class=\"token prefix unchanged\"> </span>   \"files\": [\n<span class=\"token prefix unchanged\"> </span>     \"build/main/**/*.spec.js\"\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>    ],\n<span class=\"token prefix deleted\">-</span>    \"sources\": [\n<span class=\"token prefix deleted\">-</span>      \"build/main/**/*.js\"\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   ]\n<span class=\"token prefix unchanged\"> </span> },</span></code></pre></div>\n<ol start=\"3\">\n<li>Update <code class=\"language-text\">typedoc</code> dependencies:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm un @bitjson/typedoc &amp;&amp; npm i -D typedoc</code></pre></div>\n<ol start=\"4\">\n<li>Optional. If using <a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"nofollow\">Travis CI</a>, make sure you enforce coverage in your build. Change your <code class=\"language-text\">.travis.yml</code> with this:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">sudo</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> node_js\n<span class=\"token key atrule\">node_js</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token string\">'10'</span>\n<span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">directories</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">'$HOME/.npm'</span>\n<span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> npm run test\n  <span class=\"token punctuation\">-</span> npm run cov<span class=\"token punctuation\">:</span>send\n  <span class=\"token punctuation\">-</span> npm run cov<span class=\"token punctuation\">:</span>check</code></pre></div>\n<ol start=\"5\">\n<li>It never hurts to do a clean install again <code class=\"language-text\">rm -rf node_modules &amp;&amp; npm i</code></li>\n</ol>","frontmatter":{"title":"The fast and easy way to create a TypeScript library","description":"Become a prolific TypeScript open sourcerer with this guide","meta":"How to quickly create TypeScript libraries with unit testing, automatic release, continous integration, and documentation.","date":"May 01, 2020"}}},"pageContext":{"slug":"/the-fast-and-easy-way-to-create-a-typescript-library/","previous":{"fields":{"slug":"/quarantine/quarantine-day-42/"},"frontmatter":{"title":"Quarantine — Day 42"}},"next":{"fields":{"slug":"/quarantine/quarantine-day-43/"},"frontmatter":{"title":"Quarantine — Day 43"}}}},"staticQueryHashes":["3649515864","63159454"]}